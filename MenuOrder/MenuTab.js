import React, { useEffect, useState } from 'react';
import { ScrollView, View, Text, Image, StyleSheet, TouchableOpacity, SafeAreaView, Alert, ActivityIndicator, TextInput } from 'react-native';
import { firestore } from './../firebaseConfig'; // firebase.js ÌååÏùºÏùò Í≤ΩÎ°úÏóê ÎßûÍ≤å ÏàòÏ†ï
import { collection, getDocs } from 'firebase/firestore';
import { useSelector } from 'react-redux'; // ReduxÏùò useSelector Í∞ÄÏ†∏Ïò§Í∏∞

const MenuTab = ({ navigation, category }) => {
  const [menuItems, setMenuItems] = useState([]);
  const [filteredItems, setFilteredItems] = useState([]);
  const [loadingStates, setLoadingStates] = useState({}); // Í∞Å Ïù¥ÎØ∏ÏßÄÏùò Î°úÎî© ÏÉÅÌÉúÎ•º Ï†ÄÏû•Ìï† Í∞ùÏ≤¥
  const [searchTerm, setSearchTerm] = useState(''); // Í≤ÄÏÉâÏñ¥ ÏÉÅÌÉú
  const isLoggedIn = useSelector((state) => state.auth.isLoggedIn); // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞

  useEffect(() => {
    const fetchMenuData = async () => {
      try {
        const querySnapshot = await getDocs(collection(firestore, category));
        const items = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        setMenuItems(items);
        setFilteredItems(items); // Ï¥àÍ∏∞ ÌïÑÌÑ∞ÎßÅÎêú Ìï≠Î™©ÏùÑ Î™®Îì† Ìï≠Î™©ÏúºÎ°ú ÏÑ§Ï†ï
      } catch (error) {
        console.error("Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      }
    };

    fetchMenuData();
  }, [category]);

  // Í≤ÄÏÉâ Í∏∞Îä•
  const handleSearch = (text) => {
    setSearchTerm(text);
    if (text) {
      const filtered = menuItems.filter(item => 
        item.name.toLowerCase().includes(text.toLowerCase())
      );
      setFilteredItems(filtered);
    } else {
      setFilteredItems(menuItems);
    }
  };

  // Ïû•Î∞îÍµ¨Îãà Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§ÌñâÎêòÎäî Ìï®Ïàò
  const handleCartNavigation = () => {
    if (isLoggedIn) {
      navigation.navigate('Cart'); // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏùº Îïå Ïû•Î∞îÍµ¨ÎãàÎ°ú Ïù¥Îèô
    } else {
      Alert.alert(
        'Î°úÍ∑∏Ïù∏ ÌïÑÏöî',
        'Î°úÍ∑∏Ïù∏ÏùÑ Î®ºÏ†Ä Ìï¥Ï£ºÏÑ∏Ïöî.',
        [
          { text: 'ÌôïÏù∏', onPress: () => navigation.navigate('Login') } // Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
        ]
      );
    }
  };

  // Ï£ºÎ¨∏ÎÇ¥Ïó≠ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§ÌñâÎêòÎäî Ìï®Ïàò
  const handleOrderDetailsNavigation = () => {
    if (isLoggedIn) {
      navigation.navigate('UserScreen'); // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏùº Îïå Ï£ºÎ¨∏ ÎÇ¥Ïó≠ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
    } else {
      Alert.alert(
        'Î°úÍ∑∏Ïù∏ ÌïÑÏöî',
        'Î°úÍ∑∏Ïù∏ÏùÑ Î®ºÏ†Ä Ìï¥Ï£ºÏÑ∏Ïöî.',
        [
          { text: 'ÌôïÏù∏', onPress: () => navigation.navigate('Login') } // Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
        ]
      );
    }
  };

  const handleImageLoadStart = (id) => {
    setLoadingStates((prev) => ({ ...prev, [id]: true }));
  };

  const handleImageLoadEnd = (id) => {
    setLoadingStates((prev) => ({ ...prev, [id]: false }));
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: 'white' }}>
      <View style={styles.searchContainer}>
        <TextInput 
          style={styles.searchInput} 
          placeholder="Î©îÎâ¥ Í≤ÄÏÉâ..." 
          value={searchTerm} 
          onChangeText={handleSearch} 
        />
        <TouchableOpacity style={styles.searchButton} onPress={() => handleSearch(searchTerm)}>
          <Text style={styles.searchButtonText}>üîç</Text>
        </TouchableOpacity>
      </View>
      <ScrollView contentContainerStyle={{ flexGrow: 1 }} keyboardShouldPersistTaps="handled">
        <View style={styles.menuContainer}>
          {filteredItems.map((item) => (
            <TouchableOpacity
              key={item.id}
              style={styles.menuItem}
              onPress={() => {
                const detailScreen = category === 'beverage' ? 'DrinkDetail' : 'DessertDetail';
                navigation.navigate(detailScreen, { item });
              }}
            >
              <View style={styles.imageContainer}>
                {loadingStates[item.id] && (
                  <ActivityIndicator size="large" color="#0000ff" style={styles.spinner} />
                )}
                <Image 
                  source={{ uri: item.image_url }} 
                  style={styles.menuImage} 
                  onLoadStart={() => handleImageLoadStart(item.id)}
                  onLoadEnd={() => handleImageLoadEnd(item.id)}
                />
              </View>
              <Text style={styles.menuText}>{item.name}</Text>
              <Text style={styles.menuPrice}>{item.price} Ïõê</Text>
            </TouchableOpacity>
          ))}
        </View>
      </ScrollView>
      <View style={styles.RowContainer}>
        <TouchableOpacity style={styles.orderButton} onPress={handleCartNavigation}>
          <Text style={styles.orderButtonText}>Ïû•Î∞îÍµ¨Îãà</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.orderButton} onPress={handleOrderDetailsNavigation}>
          <Text style={styles.orderButtonText}>Ï£ºÎ¨∏ÎÇ¥Ïó≠</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

// Ïä§ÌÉÄÏùº Ï†ïÏùò
const styles = StyleSheet.create({
    menuContainer: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between',
      padding: 10,
      backgroundColor: 'white',
    },
    RowContainer: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between',
      padding: 10,
      backgroundColor: 'white',
    },
    menuItem: {
      width: '48%',
      alignItems: 'center',
      marginBottom: 10,
    },
    imageContainer: {
      width: '100%',
      height: 200,
      justifyContent: 'center',
      alignItems: 'center',
    },
    menuImage: {
      width: '100%',
      height: 200,
      borderRadius: 10,
      position: 'absolute',
    },
    spinner: {
      position: 'absolute',
    },
    menuText: {
      textAlign: 'center',
      marginTop: 5,
    },
    menuPrice: {
      textAlign: 'center',
      color: '#888',
    },
    orderButton: {
      backgroundColor: '#000000',
      width: '43%',
      padding: 15,
      borderRadius: 5,
      alignItems: 'center',
      margin: 10,
    },
    orderButtonText: {
      color: '#FFFFFF',
      fontSize: 16,
      fontWeight: 'bold',
    },
    searchContainer: {
      flexDirection: 'row',
      padding: 10,
      alignItems: 'center',
      backgroundColor: 'white',
    },
    searchInput: {
      flex: 1,
      borderColor: '#ccc',
      borderWidth: 1,
      borderRadius: 5,
      padding: 10,
    },
    searchButton: {
      marginLeft: 10,
      padding: 10,
    },
    searchButtonText: {
      fontSize: 18,
    },
});

export default MenuTab;
